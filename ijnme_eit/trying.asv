%-------------------------------------------------------------------------%
% sparsity reconstruction with least-squares fidelity via soft-shrinkage  %
% Created on Sept. 18 by Bangti JIN (btjin@math.tamu.edu)                 %
%-------------------------------------------------------------------------%
clear, close all
%load dataset
texture = false;

if texture
    PATH = 'data_texture';%/pvfs2/Derick/EIT/Mine/data_texture'; %'/localdata/Derick/EIT/Mine/data';
    name = '1_samples__max_Inclusions_3__2023-08-14-16-46-00';
else
    PATH = 'data';%/pvfs2/Derick/EIT/Mine/data'; %'/localdata/Derick/EIT/Mine/data';
    name = '100_samples__max_Inclusions_3__2023-08-06-21-16-51';
end
if ~exist(sprintf('%s/%s/',PATH,name), 'dir')
    mkdir(sprintf('%s/%s/',PATH,name), 'files')
else 
    fprintf('already exists\n');
    %return
end
fprintf('here\n')


samp = 6;
%data_domain = load(sprintf('%s/%s/dataset_domain',PATH,name));
%inputConductivity  = data_domain.inputConductivity(samp);

%data_bound  = load(sprintf('%s/%s/dataset_bound',PATH,name));
%outputBoundvoltage = data_bound.outputBoundvoltage;
%outputBoundcurrent = data_bound.outputBoundcurrent;
%angl_circum        = data_bound.angl_circum;

inclusions = load(sprintf('%s/%s/inclusions',PATH,name));
aa    = inclusions.AA(samp,:);
alpha = inclusions.ALPHA(samp,:);
bb    = inclusions.BB(samp,:);
cond  = inclusions.COND(samp,:);
hh    = inclusions.HH(samp,:);
kk    = inclusions.KK(samp,:);

mask = aa ~= 0;
aa    = aa(mask);
alpha = alpha(mask); 
bb    = bb(mask);
cond  = cond(mask); 
hh    = hh(mask); 
kk    = kk(mask); 
%size(aa)
%[batchSize, Nmax, n_nodes] = size(inputConductivity);

mypde = createpde();
geometryFromEdges(mypde,@circleg);

hmax = 0.1;%0.03;% 0.013;%38%0.01;%4;%0.038;%0.005;
hmin = 0.1;%0.03;% 0.013;%0.01;%4;
mesh = generateMesh(mypde,"Hmax",hmax,"Hmin",hmin,"GeometricOrder","linear");
%mesh.Nodes
%size(mesh.Nodes);
%size(mesh.Elements);
%figure(1),clf
%pdemesh(mypde)



%-------------------------- mesh generation ---------------------------%
[p,e,t] = meshToPet(mypde.Mesh);

%size(p)
%size(e)
%size(t)
%pause(20)
% structure fem: parameters for coarse mesh
fem.nnel=3;                      % # nodes per element
fem.ndof=1;                      % # dof per node
fem.gcoord = p(1:2,:)';          % coordinates of nodes 
fem.nnode = size(p,2);           % # of system nodes
fem.sdof=fem.nnode*fem.ndof;     % system dofs
fem.nodes = t(1:3,:)';           % triangle element
fem.nel = size(fem.nodes,1);     % # of elements
fem.bcdof = e(1,:);
fem.p = p;
fem.e = e;
fem.t = t;
% structure femf: parameters for fine mesh


%-------------------------- example setup ----------------------------%
exam = 7;
sig0 = 'exp(x-x)';   % homogeneous background

if length(cond) == 3
    sigmat = 'cond(1)*heavis(1-((((x-hh(1)).*cos(alpha(1)) + (y-kk(1)).*sin(alpha(1))).^2)./(aa(1)^2))-((((x-hh(1)).*sin(alpha(1)) - (y-kk(1)).*cos(alpha(1))).^2)./(bb(1)^2)))  +  cond(2)*heavis(1-((((x-hh(2)).*cos(alpha(2)) + (y-kk(2)).*sin(alpha(2))).^2)./(aa(2)^2))-((((x-hh(2)).*sin(alpha(2)) - (y-kk(2)).*cos(alpha(2))).^2)./(bb(2)^2)))   +   cond(3)*heavis(1-((((x-hh(3)).*cos(alpha(3)) + (y-kk(3)).*sin(alpha(3))).^2)./(aa(3)^2))-((((x-hh(3)).*sin(alpha(3)) - (y-kk(3)).*cos(alpha(3))).^2)./(bb(3)^2)))';
    elseif length(cond) == 2
        sigmat = 'cond(1)*heavis(1-((((x-hh(1)).*cos(alpha(1)) + (y-kk(1)).*sin(alpha(1))).^2)./(aa(1)^2))-((((x-hh(1)).*sin(alpha(1)) - (y-kk(1)).*cos(alpha(1))).^2)./(bb(1)^2)))  +  cond(2)*heavis(1-((((x-hh(2)).*cos(alpha(2)) + (y-kk(2)).*sin(alpha(2))).^2)./(aa(2)^2))-((((x-hh(2)).*sin(alpha(2)) - (y-kk(2)).*cos(alpha(2))).^2)./(bb(2)^2)))';
    elseif length(cond) == 1
        sigmat = 'cond(1)*heavis(1-((((x-hh(1)).*cos(alpha(1)) + (y-kk(1)).*sin(alpha(1))).^2)./(aa(1)^2))-((((x-hh(1)).*sin(alpha(1)) - (y-kk(1)).*cos(alpha(1))).^2)./(bb(1)^2)))';
end
x = fem.gcoord(:,1);
y = fem.gcoord(:,2);

sigmatt = eval(sigmat);
sigmatt(sigmatt==0) = 1;
figure(2)
pdeplot(mesh,XYData=sigmatt)%, mesh='on')
colormap jet
title("Conductivity");
xlabel("x")
ylabel("y")
axis off
axis equal
drawnow
pause(1) 

%------------------------ input current ------------------------%
Neig = 5;
flux = boundflux(fem,'sin',Neig);
wt   = ones(Neig,1);

% simulated data
    

KKt = stiffmat(fem,sigmatt);% stiff matrix - fine mesh 
temp = zeros(size(flux));
for j = 1 : Neig
    [uNt,uNtt,uNnt] = neumansolve(KKt,flux(:,j),zeros(fem.sdof,1),fem);
    temp(:,j) = uNt(e(1,:));                    % potential measurements
end

std = max(max(abs(temp)));
randn('state',0)
NL = 3e-2;
temp = temp + NL*std*randn(size(temp));
    
%% sparse reconstruction
%----------------------- inverse iteration ------------------------%
KKs = stiffmat(fem,'exp(x-x)');
MM  = massmat(fem);
KKs = KKs + MM;             % Sobolev grad
MMb = massmatbdy(fem);
invpm.Neig = Neig;
invpm.MM   = MM;
invpm.KKs  = KKs;
invpm.MMb  = MMb;
invpm.sig0 = ones(fem.sdof,1);     % bgd cond.
if exam == 5
    x = fem.gcoord(:,1); 
    y = fem.gcoord(:,2);
    invpm.sig0 = eval('1+.5*heavis(y)');
end
invpm.flux = flux;
invpm.temp = temp;
invpm.wt   = wt;
invpm.maxit= 500;

% % pre-calcuation of needed variables
tic
dim = 10;
etaens = logspace(-5,-2.5,dim); 
for k = 6
    invpm.eta = etaens(k);
    [dsig,hist] = recon_sparsity(invpm,fem,0,sigmatt);
    hf = figure(5);
    fprintf('save reconstruction ...  %d \n\n',k)
    pdeplot(fem.p,fem.e,fem.t,'xydata',invpm.sig0+dsig), drawnow, colormap('jet')
    title("Sparsity");
    pfadplot='recon/sparse/';
    filename = [pfadplot 'sparse-exp' num2str(exam) '-NL' num2str(100*NL) '-alpha' num2str(k)];
    axis image, axis off, colormap('jet')
    set(colorbar,'FontSize',16), drawnow
    print(5, '-dpng' ,filename)
    saveas(5,filename,'fig')
end
toc
    
%%
% reconstruction results with standard method
etaens = logspace(-4,-1,dim);
for k = 5
    sig0  = ones(fem.sdof,1);
    if exam == 5
        x = fem.gcoord(:,1); 
        y = fem.gcoord(:,2);
        sig0 = eval('1+.5*heavis(y)');
    end
    hist  = [];
    alpha = etaens(k);
    dsig0  = zeros(fem.sdof,1);
    tic
    for iter = 1:2
        % linearized inverse model
        [J,FN0d] = jacobian(fem,sig0,flux);
        b = temp(:) - FN0d;
        
        % Tikhonov regularized solution
        n = size(J,2);
        ind = setdiff([1:fem.sdof],e(1,:));
        x = (J'*J+alpha*KKs(ind,ind))\(J'*b-alpha*KKs(ind,ind)*dsig0(ind));
        dsig0 = zeros(fem.sdof,1);
        dsig0(ind) = x;
        figure(1), pdeplot(p,e,t,'xydata',sig0+dsig0), colormap('jet'), drawnow,
        sig0 = sig0 + dsig0;
    end
    toc
%%%%%    err = sqrt((sig0-sigmatt)'*invpm.MM*(sig0-sigmatt));
    % save the figures
    hf = figure(10);
    pfadplot='recon/smooth/';
    filename = [pfadplot 'smooth-exp' num2str(exam) '-NL' num2str(100*NL) '-alpha' num2str(k)];
    pdeplot(fem.p,fem.e,fem.t,'xydata',sig0)
    axis image, axis off, colormap('jet')
    title("Smoothness");
    set(colorbar,'FontSize',16), drawnow
    print(10, '-dpng' ,filename)
    saveas(10,filename,'fig')
end